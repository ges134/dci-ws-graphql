type Blocks {
  # Hash of this block
  hash: String!

  # The size of block data in bytes
  size: Int!

  # The size of block data in bytes excluding witness data
  strippedSize: Int!

  # Three times the base size plus the total size. https://github.com/bitcoin/bips/blob/master
  weight: Int!

  # The number of the block
  number: Int!

  # Protocol version specified in block header
  version: Int!

  # The root node of a Merkle tree, where leaves are transaction hashes
  merkleRoot: Int!

  # Block creation timestamp specified in block header
  timeStamp: Date!

  # Month of the block creation timestamp specified in block header
  timeStampMonth: Date!

  # Difficulty solution specified in block header
  nonce: String!

  # Difficulty threshold specified in block header
  bits: String!

  # Data specified in the coinbase transaction of this block
  coinbaseParam: String!

  # Number of transactions included in this block
  transactionCount: Int!

  # The Cryptocurrency this Block belongs to
  currency: CryptoCurrency!
}

type Inputs {
  transactionHash: String!
  blockHash: String!
  blockNumber: Int!
  blockTimeStamp: Date!
  index: Int!
  spentTransactionHash: String!
  spentOutputIndex: Int!
  ScriptAsm: String!
  scriptHex: String!
  sequence: Int!
  requiredSignature: Int!
  type: String!
  addresses: String!
  value: Int!

  # The Cryptocurrency this Input belongs to
  currency: CryptoCurrency!
}

type Outputs {
  transaction_hash: String!
  block_hash: String!
  block_number: Int!
  block_timestamp: Date!
  index: Int!
  script_asm: String!
  script_hex: String!
  required_signatures: Int!
  type: String!
  addresses: String!
  value: Int!

  # The Cryptocurrency this Output belongs to
  currency: CryptoCurrency!
}

type Transactions {
  # The hash of this transaction
  hash: String!

  # The size of this transaction in bytes
  size: Int!

  # The virtual transaction size (differs from size for witness transactions)
  virtual_size: Int!

  # Protocol version specified in block which contained this transaction
  version: Int!

  # Earliest time that miners can include the transaction in their hashing of the Merkle root to attach it in the latest block of the blockchain
  lock_time: Int!

  # Hash of the block which contains this transaction
  block_hash: String!

  # Number of the block which contains this transaction
  block_number: Int!

  # Timestamp of the block which contains this transaction
  block_timestamp: Date!

  # Month of the block which contains this transaction
  block_timestamp_month: Date!

  # The number of inputs in the transaction
  input_count: Int!

  # The number of outputs in the transaction
  output_count: Int!

  # Total value of inputs in the transaction
  input_value: Int!

  # Total value of outputs in the transaction
  output_value: Int!

  # true if this transaction is a coinbase transaction
  is_coinbase: Boolean

  # The fee paid by this transaction
  fee: Int!

  # Transaction inputs
  inputs: Int!

  # Transaction outputs
  outputs: Int!

  # The Cryptocurrency this Transaction belongs to
  currency: CryptoCurrency!
}

enum CryptoCurrency {
  Bitcoin
  Dogecoin
  Ethereum
}

# Unique Git commits from open source repositories on GitHub, pre-grouped by repositories they appear in.
type Commits {
  commit: String!
  tree: String!
  parent: String!
  author: String!
  committer: String!
  subject: String!
  message: String!
  trailer: String!
  difference: String!
  difference_truncated: Boolean!
  repo_name: String!
  encoding: String
}

# Unique file contents of text files under 1 MiB on the HEAD branch.
# Can be joined to [bigquery-public-data:github_repos.files] table using the id columns to identify the repository and file path.
type Contents {
  id: String!
  size: Int!
  content: String
  binary: Boolean!
  copies: Number!
}

# File metadata for all files at HEAD.
# Join with [bigquery-public-data:github_repos.contents] on id columns to search text.
type Contents {
  repo_name: String!
  ref: String!
  path: String!
  mode: Int!
  id: String!
  symlink_target: String!
}

# Programming languages by repository as reported by GitHub's https://developer.github.com/v3/repos/#list-languages API
type Languages {
  repo_name: String!
  language: String!
}

# Open source license SPDX code for each repository as detected by https://developer.github.com/v3/licenses/
type Licenses {
  repo_name: String!
  license: String!
}
